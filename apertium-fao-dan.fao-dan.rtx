!fao-dan.rtx

! Documentation: https://wiki.apertium.org/wiki/Apertium-recursive

!!!!!!!!!!!!!!!!!!!!!!!!!
! Attribute Categories: !
!!!!!!!!!!!!!!!!!!!!!!!!!

gender = m f nt ut un fn mf GD ;
gender_adj = (GD ut) nt ut un GD ; ! constrained to possible dan adj genders
number = sg pl sp ND ;
defnes = def ind ;
tense = inf pret pres pp supn imp ;
person = (PD p3) p1 p2 p3 PD ;
voice = (VD actv) pasv actv ;
a_adj = sint ord pp pprs ;
a_cmp = cmp ;
a_det = dem qnt pos emph ind itg ord ;
a_neg = neg ;
a_comp = pst comp sup ;
a_prop = ant cog top org al ;
a_clb  = clb ;
a_prn  = def dem ind itg pers pos ref rel res ;
case_danprn = gen nom acc ;

dempron = "prn dem" ;
dem = dem ;

! Word sets:
w_tu = tú ;                     ! pers.p2
w_eg = eg ;                     ! pers.p1
w_tann = tann ;                 ! det


!!!!!!!!!!!!!!!!!!!!!!
! Tag Rewrite Rules: !
!!!!!!!!!!!!!!!!!!!!!!

tense > tense : pret past ;
a_det > a_det : dem pos ;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Tag Order (Output Patterns): !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

det:   _.a_det.gender.number;
adj:   _.a_adj.a_comp.gender.number.defnes.a_cmp;
np:    _.a_prop.gender.a_cmp;
n:     _.gender.number.defnes.a_cmp;
vblex: _.tense.voice;
vbser: _.tense.voice;
vbmod: _.tense.voice;
vbhaver: _.tense.voice;
pr:    _;
adv:   _.a_comp;
ij:    _;
cnjsub: _.a_clb;
cnjcoo: _.a_clb;
part:   _;

! Turn fao prn's into determiners etc. with only the tags we want:
prn_withpers:  _.a_prn.person.gender.number.case_danprn;
prn_nopers:    _.a_prn.gender.number.case_danprn;
prn_detpos:    _.a_det.gender.number;
prn: (if (1.a_det = pos)        ! don't output gen-tag on det.pos
         1(prn_detpos)
      elif (1.a_prn = pers or 1.a_prn = ref) ! these are the only dan prns with p1/2/3 tags:
         1(prn_withpers)
      else
         1(prn_nopers)
     );
! Fungerer ikkje: mamma teirra - deres mamma
! fao: tann+Det+Fem+Pl+Gen
! vi får: ^Den<det><dem><ut><sg><gen>
! vi vil ha: <det><pos><ut><sg>


! Note: attrs not included here are not available to reduction rules
N:     _.gender.number.defnes.a_cmp;
A:     _.a_adj.a_comp.gender.number.defnes.a_cmp;
NP:    _.gender.number.defnes;
DP:    _.gender.number.defnes;
PP:    _;
VP:    _.tense.number.voice;
ADV:   _;
CNJ:   _;
PRN:   _;


!!!!!!!!!!!!!!!!!!!!
! Reduction Rules: !
!!!!!!!!!!!!!!!!!!!!

N -> %n         { %1[lemcase=$lemcase] }
   | %np        { %1[lemcase=$lemcase] }
   | n.*.cmp %N { 1[lemcase=$lemcase] %2 }
   ;

A -> "A->adj"       %adj { %1[gender=(if (1.a_comp = pst and 1.gender = GD) un el-if (1.a_comp = sup and 1.gender = GD) fn else $gender_adj),
                              number=(if (1.a_comp = pst and 1.number = ND) pl else $number)] }
   | "A->n+A" n.*.cmp %A { 1 %2 }
   ;


NP ->   %N { %1[lemcase=$lemcase] }
    | A.*.pl.*.def %N { 1[gender=un, number=sp] _ %2 }
    | A.*.pst.*.sg.*.def %N { 1[gender=un, number=sp] _ %2 }
    | A %N { 1[gender=(if (2.number = pl) un else 2.gender), number=2.number] _ %2 }
    | %prn { %1 }
    | %det { %1 }
    | %dem { %1 }
    ;

PP -> pr %DP { 1 _ 2 } ;

DP -> "det NP" det %NP
      { 1[gender=(if (2.number = pl) un else 2.gender), number=2.number] _ 2 }
!    | "dempron NP" prn %NP
    | "prn NP" prn %NP    
    | "det NP" det %NP
      { 1[gender=(if (2.number = pl) un else 2.gender), number=2.number] _ 2 }
    | "n.def prn.gen ~> det.pos n.ind"
      %NP prn.*.gen
      { 2[gender=(if (1.number = pl) un else 1.gender), number=1.number, lemcase=1.lemcase]
        _
        1[defnes=ind, lemcase=2.lemcase]
      }
      ;
! tú<prn><pers><sg><nom>
! du<prn><pers><p2><ut><sg><nom>


ADV -> "ADV" %adv { %1 }
    | "ADV.nt" %A.*.nt { %1 }
    ;

VP -> %vblex { %1 }
    | %vbser { %1 }
    | %vbmod { %1 }
    | %vbhaver { %1 }
    ;


CNJ -> %cnjcoo { %1 }
     | %cnjsub { %1 }
     ;
